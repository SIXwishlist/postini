TODO LIST
=========

Handle exceptions properly, make our own exception classes
  Duplicate domain exception looks like this:
    SOAP::FaultError: Batch:  code:general, message: A domain record already exists for 'inx.co.za'. () (Request ID 5328153A-6BBD-11DD-A41F-AE53A6E672CE)
      from #<SOAP::Mapping::Object:0xb7614344>
  Unknown user exception:
    SOAP::FaultError: Batch:  code:general, message: No user 'sarie@inx.co.za'. () (Request ID F81C4176-6C88-11DD-8917-A059A6E672CE)
      from #<SOAP::Mapping::Object:0xb75e736c>

Prevent unneeded operations:
  * Don't disable an already disabled user

Add support for org management

Support for lazy-loading:
  * Orgs users => user details
  * Convert search results into fully useable objects

Work out a nice set of class+instance method combinations. The API's aren't
really geared for instance-level stuff. So User.destroy( address ) and 
@user.destroy should essentially be the same thing.

PROPER ATTRIBUTE HANDLING, NOT INSTANCE VARIABLES:

  ActiveRecord-like validations (possible external library)

  Map remote types to native Ruby types:
    * User#created_on from Unix timestamp to Time instance
    * User#approved_senders 'empty' to []

  Support for changed attribute tracking, so we can implement a #save method and
  call only the needed API calls or only send the changed paramters.

  Would it not be cleaner to wrap the records from soap4r (eg UserRecord, 
  DomainRecord) inside our own classes instead of having duplicates lying around?
